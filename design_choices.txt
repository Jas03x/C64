- Goals:
	1) should give the programmer as much control as possible
	2) should be as bare metal as possible, with as little bloat as possible

- Headers:
	- Headers are being kept in C64 even though we have modules, and that is because they are a great way to self-document the code
		- They also help seperate the code into interfaces and implementations
	- At the first stage of compilation, all the headers are read into a symbol table
	- Header guards are not needed since C64 works differently
	- The first line in a header is the module name. If there is no module name, then the header's symbols are exported into the global module
		- <access level> "import <module_name>;" is used to import a module
			- access level is private (default) or public. This only affects library files, as only public functions will be exported into the lib file
		- similarly, we used "export <module name>;" in a source file to show this source's functions will define the functions for the declared module
			- a c file can only export to one module

- Classes, templates, and other object oriented concepts:
	- These concepts will not be implemented in C64 because they conflict with the goals

	- These concepts will be added later in an extended version of the language